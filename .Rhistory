debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,dMMD, num.trees=num.trees, parallel=F)
K_y
K_Y
K_yY
debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,dMMD, num.trees=num.trees, parallel=F)
w
w%*%K_Y
w%*%K_Y%*%w
debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,dMMD, num.trees=num.trees, parallel=F)
YY
debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,dMMD, num.trees=num.trees, parallel=F)
w*K_yY
X
XY
w%*%K_yY
K_yY%*%w
XY
debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,dMMD, num.trees=num.trees, parallel=F)
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,dMMD, num.trees=num.trees, parallel=F)
debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,dMMD, num.trees=num.trees, parallel=F)
debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,dMMD, num.trees=num.trees, parallel=F)
mean(D, na.rm=T, trim=0.05)
# Define the Gaussian kernel
k_y <- rbfdot(sigma = sigma)
k_Y <- rbfdot(sigma = sigma)
# Compute the kernel matrices
K_y <- kernelMatrix(k_y, Ytest, y = Ytest)
K_Y <- kernelMatrix(k_Y, Y, y = Y)
K_yY <- kernelMatrix(k_y, Ytest, y = Y)
yy<-diag(K_y)
YY<-diag(weights%*%K_Y%*%t(weights%*%))
weights%*%K_Y
K_Y%*%t(weights%*%)
K_Y%*%t(weights)
YY<-diag(weights%*%K_Y%*%t(weights))
dim(K_yY)
sweep(w,K_yY, FUN="*")
sweep(weights,K_yY, FUN="*")
K_yY%*%t(weights)
yy<-diag(K_y)
YY<-diag(weights%*%K_Y%*%t(weights))
Yy<-K_yY%*%t(weights)
mean(yy+YY-Yy)
mean(yy+YY-2*Yy)
mean(D)
-mean(yy+YY-2*Yy)
yy[1]
y<-Ytest[1,]
# Compute the kernel matrices
K_y <- kernelMatrix(k_y, y, y = y)
#K_Y <- kernelMatrix(k_Y, Y, y = Y)
K_yY <- kernelMatrix(k_y, t(y), y = Y)
XX1 <- K_y
XX1
YY1 <- w%*%K_Y%*%w
w<-weights[1,]
YY1 <- w%*%K_Y%*%w
YY[1]
YY1
XY[1]
Yy[1]
K_yY
sum(w*K_yY)
XY[1]
Yy[1]
-mean( sqrt(yy+YY-2*Yy))
yy+YY-2*Yy
sqrt(yy+YY-2*Yy)
yy+YY-2*Yy
yy+YY-2*Yy>0
sum(yy+YY-2*Yy>0)
tmp<-yy+YY-2*Yy
dim(tmp)
yy<-diag(K_y)
YY<-diag(weights%*%K_Y%*%t(weights))
Yy<-K_yY%*%t(weights)
dim(yy+YY-2*Yy)
sqrt(yy+YY-2*Yy)
-mean( sqrt(yy+YY-2*Yy))
mean(D)
# Compute the kernel matrices
K_y <- kernelMatrix(k_y, Ytest, y = Ytest)
K_Y <- kernelMatrix(k_Y, Y, y = Y)
K_yY <- kernelMatrix(k_y, Ytest, y = Y)
yy<-diag(K_y)
YY<-diag(weights%*%K_Y%*%t(weights))
Yy<-K_yY%*%t(weights)
-mean( sqrt(yy+YY-2*Yy))
D
head(D^2)
tmp<-yy+YY-2*Yy
head(tmp)
dim(tmp)
# Compute the kernel matrices
K_y <- kernelMatrix(k_y, Ytest, y = Ytest)
K_Y <- kernelMatrix(k_Y, Y, y = Y)
K_yY <- kernelMatrix(k_y, Ytest, y = Y)
yy<-diag(K_y)
dim(yy)
yy
eval[1]<-distpredicteval(X,Y,Xtest[1:20,], Ytest[1:20,],dMMD, num.trees=num.trees, parallel=F)
eval[1]<-distpredicteval(X,Y,Xtest[1:20,], Ytest[1:20,, drop=F],dMMD, num.trees=num.trees, parallel=F)
D
# Define the Gaussian kernel
k_y <- rbfdot(sigma = sigma)
k_Y <- rbfdot(sigma = sigma)
# Compute the kernel matrices
K_y <- kernelMatrix(k_y, Ytest, y = Ytest)
K_Y <- kernelMatrix(k_Y, Y, y = Y)
K_yY <- kernelMatrix(k_y, Ytest, y = Y)
yy<-diag(K_y)
YY<-diag(weights%*%K_Y%*%t(weights))
Yy<-K_yY%*%t(weights)
dim(YY)
yy
YY
Yy
dim(yY)
dim(Yy)
K_yY
dim(K_yY)
dim(t(weights))
Yy<-diag(K_yY%*%t(weights))
yy+YY-2*Yy
D^2
-mean( sqrt(yy+YY-2*Yy))
mean(D)
source("~/GitHub/DRFvarimporance/DRFvariableimportance.R")
library(kernlab)
library(drf)
library(Matrix)
# Load necessary libraries
library(mvtnorm) # for generating multivariate normal random variables
library(ks)
library(doParallel)
library(dplyr)
library(kableExtra)
library(copula)
library("MulvariateRandomForestVarImp")
library(doParallel)
source("drfnew_v2.R")
#source("applications")
source("genData.R")
source("evaluation.R")
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
load("~/GitHub/DRFvarimporance/firstresults_wagedata_n_4000.RData")
set.seed(10)
Xtest<-res_wage$Xtest
Ytest<-res_wage$Ytest
X<-res_wage$X
Y<-res_wage$Y
VI<-res_wage$ressynth$VI
metric<-"MMD"
sort(VI,decreasing=T)
plot(1:length(VI),sort(VI), cex=0.8, col="darkblue", ylab="Sorted VI", xlab="")
#text(x=65, y= VI[ "education_level" ], labels="education level"  )
#text(x=68, y= sort(VI)["age"], labels="age"  )
#text(x=70, y= sort(VI)["male"]+0.03, labels="male"  )
eval<-rep(NA,2)
evalMAD<-rep(NA,2)
p<-ncol(X)
DRFall <- drf(X=X, Y=Y, num.trees=num.trees)
quantpredictall<-predict(DRFall, newdata=Xtest, functional="quantile",quantiles=c(0.5))
evalMAD[1] <- mean(sapply(1:nrow(Xtest), function(j)  abs(Ytest[j] - quantpredictall$quantile[,,"q=0.5"][1]) ))
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,d=metric, num.trees=num.trees, parallel=F)
debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
Xtest<-res_wage$Xtest
Ytest<-res_wage$Ytest
X<-res_wage$X
Y<-res_wage$Y
VI<-res_wage$ressynth$VI
metric<-"MMD"
sort(VI,decreasing=T)
plot(1:length(VI),sort(VI), cex=0.8, col="darkblue", ylab="Sorted VI", xlab="")
#text(x=65, y= VI[ "education_level" ], labels="education level"  )
#text(x=68, y= sort(VI)["age"], labels="age"  )
#text(x=70, y= sort(VI)["male"]+0.03, labels="male"  )
eval<-rep(NA,2)
evalMAD<-rep(NA,2)
p<-ncol(X)
DRFall <- drf(X=X, Y=Y, num.trees=num.trees)
quantpredictall<-predict(DRFall, newdata=Xtest, functional="quantile",quantiles=c(0.5))
evalMAD[1] <- mean(sapply(1:nrow(Xtest), function(j)  abs(Ytest[j] - quantpredictall$quantile[,,"q=0.5"][1]) ))
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,d=metric, num.trees=num.trees, parallel=F)
cutoff<-0.01
DRFred <- drf(X=X[,names(VI[VI > cutoff])], Y=Y, num.trees=num.trees)
quantpredictred<-predict(DRFred, newdata=Xtest[,names(VI[VI > cutoff])], functional="quantile",quantiles=c(0.5))
evalMAD[2] <- mean(sapply(1:nrow(Xtest), function(j)  abs(Ytest[j] - quantpredictred$quantile[,,"q=0.5"][1]) ))
eval[2]<-distpredicteval(X[,names(VI[VI > cutoff])],Y,Xtest[,names(VI[VI > cutoff])], Ytest,d=metric, num.trees=num.trees, parallel=F)
round(sort(VI[VI > cutoff], decreasing=T),3)
round((eval[2]-eval[1])/eval[1]*100,3)
round((evalMAD[2]-evalMAD[1])/evalMAD[1]*100,3)
c
set.seed(10)
metric<-"NPLD"
sort(VI,decreasing=T)
plot(1:length(VI),sort(VI), cex=0.8, col="darkblue", ylab="Sorted VI", xlab="")
#text(x=65, y= VI[ "education_level" ], labels="education level"  )
#text(x=68, y= sort(VI)["age"], labels="age"  )
#text(x=70, y= sort(VI)["male"]+0.03, labels="male"  )
eval<-rep(NA,2)
evalMAD<-rep(NA,2)
p<-ncol(X)
DRFall <- drf(X=X, Y=Y, num.trees=num.trees)
set.seed(10)
metric<-"NPLD"
sort(VI,decreasing=T)
plot(1:length(VI),sort(VI), cex=0.8, col="darkblue", ylab="Sorted VI", xlab="")
#text(x=65, y= VI[ "education_level" ], labels="education level"  )
#text(x=68, y= sort(VI)["age"], labels="age"  )
#text(x=70, y= sort(VI)["male"]+0.03, labels="male"  )
eval<-rep(NA,2)
evalMAD<-rep(NA,2)
p<-ncol(X)
DRFall <- drf(X=X, Y=Y, num.trees=num.trees)
quantpredictall<-predict(DRFall, newdata=Xtest, functional="quantile",quantiles=c(0.5))
evalMAD[1] <- mean(sapply(1:nrow(Xtest), function(j)  abs(Ytest[j] - quantpredictall$quantile[,,"q=0.5"][1]) ))
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,d=metric, num.trees=num.trees, parallel=F)
debugSource("~/GitHub/DRFvarimporance/drfnew_v2.R")
metric<-"NPLD"
sort(VI,decreasing=T)
plot(1:length(VI),sort(VI), cex=0.8, col="darkblue", ylab="Sorted VI", xlab="")
#text(x=65, y= VI[ "education_level" ], labels="education level"  )
#text(x=68, y= sort(VI)["age"], labels="age"  )
#text(x=70, y= sort(VI)["male"]+0.03, labels="male"  )
eval<-rep(NA,2)
evalMAD<-rep(NA,2)
p<-ncol(X)
DRFall <- drf(X=X, Y=Y, num.trees=num.trees)
quantpredictall<-predict(DRFall, newdata=Xtest, functional="quantile",quantiles=c(0.5))
evalMAD[1] <- mean(sapply(1:nrow(Xtest), function(j)  abs(Ytest[j] - quantpredictall$quantile[,,"q=0.5"][1]) ))
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,d=metric, num.trees=num.trees, parallel=F)
cutoff<-0.01
DRFred <- drf(X=X[,names(VI[VI > cutoff])], Y=Y, num.trees=num.trees)
quantpredictred<-predict(DRFred, newdata=Xtest[,names(VI[VI > cutoff])], functional="quantile",quantiles=c(0.5))
evalMAD[2] <- mean(sapply(1:nrow(Xtest), function(j)  abs(Ytest[j] - quantpredictred$quantile[,,"q=0.5"][1]) ))
eval[2]<-distpredicteval(X[,names(VI[VI > cutoff])],Y,Xtest[,names(VI[VI > cutoff])], Ytest,d=metric, num.trees=num.trees, parallel=F)
round(sort(VI[VI > cutoff], decreasing=T),3)
round((eval[2]-eval[1])/eval[1]*100,3)
round((evalMAD[2]-evalMAD[1])/evalMAD[1]*100,3)
metric<-"MMD"
sort(VI,decreasing=T)
plot(1:length(VI),sort(VI), cex=0.8, col="darkblue", ylab="Sorted VI", xlab="")
#text(x=65, y= VI[ "education_level" ], labels="education level"  )
#text(x=68, y= sort(VI)["age"], labels="age"  )
#text(x=70, y= sort(VI)["male"]+0.03, labels="male"  )
eval<-rep(NA,2)
evalMAD<-rep(NA,2)
p<-ncol(X)
DRFall <- drf(X=X, Y=Y, num.trees=num.trees)
quantpredictall<-predict(DRFall, newdata=Xtest, functional="quantile",quantiles=c(0.5))
evalMAD[1] <- mean(sapply(1:nrow(Xtest), function(j)  abs(Ytest[j] - quantpredictall$quantile[,,"q=0.5"][1]) ))
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,d=metric, num.trees=num.trees, parallel=F)
cutoff<-0.001
DRFred <- drf(X=X[,names(VI[VI > cutoff])], Y=Y, num.trees=num.trees)
quantpredictred<-predict(DRFred, newdata=Xtest[,names(VI[VI > cutoff])], functional="quantile",quantiles=c(0.5))
evalMAD[2] <- mean(sapply(1:nrow(Xtest), function(j)  abs(Ytest[j] - quantpredictred$quantile[,,"q=0.5"][1]) ))
eval[2]<-distpredicteval(X[,names(VI[VI > cutoff])],Y,Xtest[,names(VI[VI > cutoff])], Ytest,d=metric, num.trees=num.trees, parallel=F)
round(sort(VI[VI > cutoff], decreasing=T),3)
round((eval[2]-eval[1])/eval[1]*100,3)
round((evalMAD[2]-evalMAD[1])/evalMAD[1]*100,3)
library(kernlab)
library(drf)
library(Matrix)
# Load necessary libraries
library(mvtnorm) # for generating multivariate normal random variables
library(ks)
library(doParallel)
library(dplyr)
library(kableExtra)
library(copula)
library("MulvariateRandomForestVarImp")
library(doParallel)
source("drfnew_v2.R")
#source("applications")
source("genData.R")
source("evaluation.R")
start.time <- Sys.time()
set.seed(10)
n<-4000
num.trees<-500
res_birth<-evalrealdata(dataset="real_birthdata2", n=n, ntest=round(1/2*n), num.trees=num.trees)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Xtest<-res_birth$Xtest
Ytest<-res_birth$Ytest
X<-res_birth$X
Y<-res_birth$Y
VI<-res_birth$ressynth$VI
metric <- "MMD"
sort(VI,decreasing=T)
plot(1:length(VI),sort(VI), cex=0.8, col="darkblue", ylab="Sorted VI", xlab="")
#text(x=65, y= VI[ "education_level" ], labels="education level"  )
#text(x=68, y= sort(VI)["age"], labels="age"  )
#text(x=70, y= sort(VI)["male"]+0.03, labels="male"  )
eval<-rep(NA,2)
p<-ncol(X)
DRFall <- drf(X=X, Y=Y, num.trees=num.trees)
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,d=metric, num.trees=num.trees, parallel=T)
cutoff<-0.01
DRFred <- drf(X=X[,names(VI[VI > cutoff])], Y=Y, num.trees=num.trees)
eval[2]<-distpredicteval(X[,names(VI[VI > cutoff])],Y,Xtest[,names(VI[VI > cutoff])], Ytest,d=metric, parallel=T, num.trees=num.trees)
print("cutoff=0.01")
round(sort(VI[VI > cutoff], decreasing=T),3)
round((eval[2]-eval[1])/eval[1]*100,3)
cutoff<-0.001
DRFred <- drf(X=X[,names(VI[VI > cutoff])], Y=Y, num.trees=num.trees)
eval[2]<-distpredicteval(X[,names(VI[VI > cutoff])],Y,Xtest[,names(VI[VI > cutoff])], Ytest,d=metric, parallel=T, num.trees=num.trees)
print("cutoff=0.001")
round(sort(VI[VI > cutoff], decreasing=T),3)
round((eval[2]-eval[1])/eval[1]*100,3)
VI
sort(VI,decrease=T)
save.image("C:/Users/jeffr/OneDrive/Dokumente/GitHub/DRFvarimporance/firstresults_birthdata2_n_4000.RData")
sort(VI,decreasing=T)
start.time <- Sys.time()
set.seed(10)
n<-4000
num.trees<-700
res_birth<-evalrealdata(dataset="real_birthdata2", n=n, ntest=round(1/2*n), num.trees=num.trees)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
Xtest<-res_birth$Xtest
Ytest<-res_birth$Ytest
X<-res_birth$X
Y<-res_birth$Y
VI<-res_birth$ressynth$VI
metric <- "MMD"
sort(VI,decreasing=T)
plot(1:length(VI),sort(VI), cex=0.8, col="darkblue", ylab="Sorted VI", xlab="")
#text(x=65, y= VI[ "education_level" ], labels="education level"  )
#text(x=68, y= sort(VI)["age"], labels="age"  )
#text(x=70, y= sort(VI)["male"]+0.03, labels="male"  )
eval<-rep(NA,2)
p<-ncol(X)
DRFall <- drf(X=X, Y=Y, num.trees=num.trees)
eval[1]<-distpredicteval(X,Y,Xtest, Ytest,d=metric, num.trees=num.trees, parallel=T)
cutoff<-0.01
DRFred <- drf(X=X[,names(VI[VI > cutoff])], Y=Y, num.trees=num.trees)
eval[2]<-distpredicteval(X[,names(VI[VI > cutoff])],Y,Xtest[,names(VI[VI > cutoff])], Ytest,d=metric, parallel=T, num.trees=num.trees)
print("cutoff=0.01")
round(sort(VI[VI > cutoff], decreasing=T),3)
round((eval[2]-eval[1])/eval[1]*100,3)
cutoff<-0.001
DRFred <- drf(X=X[,names(VI[VI > cutoff])], Y=Y, num.trees=num.trees)
eval[2]<-distpredicteval(X[,names(VI[VI > cutoff])],Y,Xtest[,names(VI[VI > cutoff])], Ytest,d=metric, parallel=T, num.trees=num.trees)
print("cutoff=0.001")
round(sort(VI[VI > cutoff], decreasing=T),3)
round((eval[2]-eval[1])/eval[1]*100,3)
sort(VI,decreasing=T)
load("C:/Users/Jeff/OneDrive/Dokumente/Studium/PhD/Projects with Marc/Github/DRFvarimporance/real_wagedata_n=2000")
resDRF$evalMMD
resDRF
resDRF
lapply(1:B, function(b)  resDRF[[b]]$evalMMD)
length()
length(resDRF)
lapply(1:length(resDRF), function(b)  resDRF[[b]]$evalMMD)
resDRF[[1]]
lapply(1:length(resDRF), function(b)  resDRF[[b]]$evalMMD)
sapply(1:length(resDRF), function(b)  resDRF[[b]]$evalMMD)
evalMMDmat<-sapply(1:length(resDRF), function(b)  resDRF[[b]]$evalMMD)
dim(evalMMDmat)
colnames(evalMMDmat)
colMeans(evalMMDmat)
rowMeans(evalMMDmat)
plot(rowMeans(evalMMDmat))
plot(rowMeans(evalMMDmat), type="l", cex=0.8)
plot(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
evalMMDmat
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
sdMMDmat
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkblue")
lines(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkblue")
evalMMDmat<-sapply(1:length(resDRF), function(b)  resDRF[[b]]$evalMMD)
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkblue")
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkblue")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen", main="MMD Loss DRF")
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
evalNPLDmat<-sapply(1:length(resDRF), function(b)  resDRF[[b]]$evalNPLD)
sdNPLDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalNPLDmat[j,])  )
evalNPLDmat<-sapply(1:length(resDRF), function(b)  resDRF[[b]]$evalNPLD)
sdNPLDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalNPLDmat[j,])  )
plot(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen", main="NPLD Loss DRF")
lines(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalNPLDmat), type="l", cex=0.8, col="darkblue")
evalMMDmat<-sapply(1:length(resDRF), function(b)  resDRF[[b]]$evalMMD)
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen", main="MMD Loss DRF")
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
evalNPLDmat<-sapply(1:length(resDRF), function(b)  resDRF[[b]]$evalNPLD)
sdNPLDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalNPLDmat[j,])  )
plot(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen", main="NPLD Loss DRF")
lines(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalNPLDmat), type="l", cex=0.8, col="darkblue")
evalMMDmat<-sapply(1:length(resDRF_native), function(b)  resDRF_native[[b]]$evalMMD)
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen", main="MMD Loss DRF")
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
evalNPLDmat<-sapply(1:length(resDRF_native), function(b)  resDRF_native[[b]]$evalNPLD)
sdNPLDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalNPLDmat[j,])  )
plot(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen", main="NPLD Loss DRF native")
lines(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalNPLDmat), type="l", cex=0.8, col="darkblue")
evalMMDmat<-sapply(1:length(ressobolMDA), function(b)  ressobolMDA[[b]]$evalMMD)
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen", main="MMD Loss Sobol MDA")
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
evalMMDmat<-sapply(1:length(ressobolMDA), function(b)  ressobolMDA[[b]]$evalMMD)
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen", main="MMD Loss Sobol MDA")
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
evalMMDmat<-sapply(1:length(ressobolMDA), function(b)  ressobolMDA[[b]]$evalMMD)
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
ylim=c(min(rowMeans(evalMMDmat) - 1.96*sdMMDmat), max(rowMeans(evalMMDmat) + 1.96*sdMMDmat ) )
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen", main="MMD Loss Sobol MDA", ylim=ylim)
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
evalNPLDmat<-sapply(1:length(ressobolMDA), function(b)  ressobolMDA[[b]]$evalNPLD)
sdNPLDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalNPLDmat[j,])  )
ylim=c(min(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat), max(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat ) )
plot(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen", main="NPLD Loss Sobol MDA", ylim=ylim)
lines(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalNPLDmat), type="l", cex=0.8, col="darkblue")
evalMMDmat<-sapply(1:length(resDRF_native), function(b)  resDRF_native[[b]]$evalMMD)
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
ylim=c(min(rowMeans(evalMMDmat) - 1.96*sdMMDmat), max(rowMeans(evalMMDmat) + 1.96*sdMMDmat ) )
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen", main="MMD Loss DRF native", ylim=ylim)
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
evalNPLDmat<-sapply(1:length(resDRF_native), function(b)  resDRF_native[[b]]$evalNPLD)
sdNPLDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalNPLDmat[j,])  )
ylim=c(min(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat), max(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat ) )
plot(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen", main="NPLD Loss DRF native", ylim=ylim)
lines(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalNPLDmat), type="l", cex=0.8, col="darkblue")
evalMMDmat<-sapply(1:length(resDRF), function(b)  resDRF[[b]]$evalMMD)
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
ylim=c(min(rowMeans(evalMMDmat) - 1.96*sdMMDmat), max(rowMeans(evalMMDmat) + 1.96*sdMMDmat ) )
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen", main="MMD Loss DRF", ylim=ylim)
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
evalNPLDmat<-sapply(1:length(resDRF), function(b)  resDRF[[b]]$evalNPLD)
sdNPLDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalNPLDmat[j,])  )
ylim=c(min(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat), max(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat ) )
plot(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen", main="NPLD Loss DRF", ylim=ylim)
lines(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalNPLDmat), type="l", cex=0.8, col="darkblue")
evalMMDmat<-sapply(1:length(resDRF), function(b)  resDRF[[b]]$evalMMD)
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
ylim=c(min(rowMeans(evalMMDmat) - 1.96*sdMMDmat), max(rowMeans(evalMMDmat) + 1.96*sdMMDmat ) )
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen", main="MMD Loss DRF", ylim=ylim,
xlab="Number of Variables removed", ylab="Values")
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
evalNPLDmat<-sapply(1:length(resDRF), function(b)  resDRF[[b]]$evalNPLD)
sdNPLDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalNPLDmat[j,])  )
ylim=c(min(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat), max(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat ) )
plot(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen", main="NPLD Loss DRF", ylim=ylim,
xlab="Number of Variables removed", ylab="Values")
lines(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalNPLDmat), type="l", cex=0.8, col="darkblue")
evalMMDmat<-sapply(1:length(resDRF_native), function(b)  resDRF_native[[b]]$evalMMD)
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
ylim=c(min(rowMeans(evalMMDmat) - 1.96*sdMMDmat), max(rowMeans(evalMMDmat) + 1.96*sdMMDmat ) )
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen", main="MMD Loss DRF native", ylim=ylim,
xlab="Number of Variables removed", ylab="Values")
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
evalNPLDmat<-sapply(1:length(resDRF_native), function(b)  resDRF_native[[b]]$evalNPLD)
sdNPLDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalNPLDmat[j,])  )
ylim=c(min(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat), max(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat ) )
plot(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen", main="NPLD Loss DRF native", ylim=ylim,
xlab="Number of Variables removed", ylab="Values")
lines(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalNPLDmat), type="l", cex=0.8, col="darkblue")
evalMMDmat<-sapply(1:length(ressobolMDA), function(b)  ressobolMDA[[b]]$evalMMD)
sdMMDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalMMDmat[j,])  )
ylim=c(min(rowMeans(evalMMDmat) - 1.96*sdMMDmat), max(rowMeans(evalMMDmat) + 1.96*sdMMDmat ) )
plot(rowMeans(evalMMDmat) - 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen", main="MMD Loss Sobol MDA", ylim=ylim,
xlab="Number of Variables removed", ylab="Values")
lines(rowMeans(evalMMDmat) + 1.96*sdMMDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalMMDmat), type="l", cex=0.8, col="darkblue")
evalNPLDmat<-sapply(1:length(ressobolMDA), function(b)  ressobolMDA[[b]]$evalNPLD)
sdNPLDmat<-sapply(1:nrow(evalMMDmat), function(j) sd(evalNPLDmat[j,])  )
ylim=c(min(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat), max(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat ) )
plot(rowMeans(evalNPLDmat) - 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen", main="NPLD Loss Sobol MDA", ylim=ylim,
xlab="Number of Variables removed", ylab="Values")
lines(rowMeans(evalNPLDmat) + 1.96*sdNPLDmat, type="l", cex=0.8, col="darkgreen")
lines(rowMeans(evalNPLDmat), type="l", cex=0.8, col="darkblue")
