##### Continue with the collection of the DRF datasets ######
## Discuss with Julie: Could be super interesting to use a medical dataset with
## patients, whereby X is the patients characteristics and Y is a stream of measurements
##(though would probably need Gaussian processes in a first step)
## Step 2: Do Analysis
### 2.a) if the dataset is synthetic, we can check the correct variable ordering
evalsynthetic(dataset="meanshift", L=10, n=n, p=10, num.trees = num.trees)
library(kernlab)
library(drf)
library(Matrix)
# Load necessary libraries
library(mvtnorm) # for generating multivariate normal random variables
library(ks)
library(dplyr)
library(kableExtra)
library(copula)
source("drfnew_v2.R")
#source("applications")
source("genData.R")
source("evaluation.R")
set.seed(10)
### Continue with more fancy examples!!!
n<-1000
ntest<-round(n*0.1)
num.trees<-3000
##### Continue with the collection of the DRF datasets ######
## Discuss with Julie: Could be super interesting to use a medical dataset with
## patients, whereby X is the patients characteristics and Y is a stream of measurements
##(though would probably need Gaussian processes in a first step)
## Step 2: Do Analysis
### 2.a) if the dataset is synthetic, we can check the correct variable ordering
evalsynthetic(dataset="GP", L=10, n=n, p=10, num.trees = num.trees)
library(drf)
predict.drf
?predict.drf
library(MASS)
library(drf)
### unconditional example!!
set.seed(1)
n<-200
p<-2
X<-matrix(rnorm(p*n, 1), nrow=n)
simulate_P_theta <- function(M, theta){ mvrnorm(M, mu=theta, Sigma=diag(length(theta)))   }
derivative_log_density<-function(theta, Y){sweep(Y,2, theta, "-")  }
res<-MMDestimation(X, M=5, k=NULL, w=NULL, numit=2000, simulate_P_theta, derivative_log_density, theta_init=rep(0,p))
res
###DRF example!
set.seed(2)
n<-2000
beta1<-1
beta2<--1.8
d<-1
# Model Simulation
X<-mvrnorm(n = n, mu=c(0,0), Sigma=matrix(c(1,0,0,1), nrow=2,ncol=2))
#X<-mvrnorm(n = n, mu=c(0,0), Sigma=diag(2))
u<-rnorm(n=n, sd = 1)#sqrt(exp(X[,1]))
Y<- matrix(beta1*X[,1] + beta2*X[,2] + u, ncol=1)
# Choose an x that is not too far out
x<-matrix(c(1,1),ncol=2)
## Fit the new DRF framework
drf_fit <- drf(X=X, Y=Y, num.trees=5000, min.node.size = 15,  ci.group.size = 1)
## predict weights
DRF = predict(drf_fit, newdata=x)
weights <- DRF$weights[1,]
sum(weights*Y)
simulate_P_theta <- function(M, theta){ mvrnorm(M, mu=theta, Sigma=diag(length(theta)))   }
derivative_log_density<-function(theta, Y){sweep(Y,2, theta, "-")  }
res<-MMDestimation(Y, M=5, k=NULL, w=weights, numit=1000, simulate_P_theta, derivative_log_density, theta_init=rep(0,d))
#res<-MMDestimation(Y, M=5, k=NULL, w=rep(1/n,n), numit=1000, simulate_P_theta, derivative_log_density, theta_init=rep(0,d))
res
source("C:/Users/Jeff/OneDrive/Today/MMD_Estimation/MMD_minimization.R")
library(MASS)
library(drf)
### unconditional example!!
set.seed(1)
n<-200
p<-2
X<-matrix(rnorm(p*n, 1), nrow=n)
simulate_P_theta <- function(M, theta){ mvrnorm(M, mu=theta, Sigma=diag(length(theta)))   }
derivative_log_density<-function(theta, Y){sweep(Y,2, theta, "-")  }
res<-MMDestimation(X, M=5, k=NULL, w=NULL, numit=2000, simulate_P_theta, derivative_log_density, theta_init=rep(0,p))
res
###DRF example!
set.seed(2)
n<-2000
beta1<-1
beta2<--1.8
d<-1
# Model Simulation
X<-mvrnorm(n = n, mu=c(0,0), Sigma=matrix(c(1,0,0,1), nrow=2,ncol=2))
#X<-mvrnorm(n = n, mu=c(0,0), Sigma=diag(2))
u<-rnorm(n=n, sd = 1)#sqrt(exp(X[,1]))
Y<- matrix(beta1*X[,1] + beta2*X[,2] + u, ncol=1)
# Choose an x that is not too far out
x<-matrix(c(1,1),ncol=2)
## Fit the new DRF framework
drf_fit <- drf(X=X, Y=Y, num.trees=5000, min.node.size = 15,  ci.group.size = 1)
## predict weights
DRF = predict(drf_fit, newdata=x)
weights <- DRF$weights[1,]
sum(weights*Y)
simulate_P_theta <- function(M, theta){ mvrnorm(M, mu=theta, Sigma=diag(length(theta)))   }
derivative_log_density<-function(theta, Y){sweep(Y,2, theta, "-")  }
res<-MMDestimation(Y, M=5, k=NULL, w=weights, numit=1000, simulate_P_theta, derivative_log_density, theta_init=rep(0,d))
#res<-MMDestimation(Y, M=5, k=NULL, w=rep(1/n,n), numit=1000, simulate_P_theta, derivative_log_density, theta_init=rep(0,d))
res
library(kernlab)
library(drf)
library(Matrix)
# Load necessary libraries
library(mvtnorm) # for generating multivariate normal random variables
library(ks)
library(dplyr)
library(kableExtra)
library(copula)
source("drfnew_v2.R")
#source("applications")
source("genData.R")
source("evaluation.R")
set.seed(10)
### Continue with more fancy examples!!!
n<-500
ntest<-round(n*0.1)
num.trees<-2000
##### Continue with the collection of the DRF datasets ######
## Discuss with Julie: Could be super interesting to use a medical dataset with
## patients, whereby X is the patients characteristics and Y is a stream of measurements
##(though would probably need Gaussian processes in a first step)
debug(drfwithVI)
### 2.a) if the dataset is synthetic, we can check the correct variable ordering
evalsynthetic(dataset="GP", L=10, n=n, B=1, p=10, num.trees = num.trees)
B<-50
sample.splitting=T
ntest=100
p
head(X)
X<-cbind(X[,1], X[,2], X[,3])
X
num.trees=500
DRFpred
wall
I0
j<-1
DRFj <-
drfCI(
X = X[, -j, drop=F],
Y = Y,
B = B,
num.trees=500
)
DRFpredj = predictdrf(DRFj, x = Xtest[, -j, drop=F])
wj <- DRFpredj$weights
val <- sum(diag( (wj - wall) %*% K %*% t(wj - wall) ))
nulldist <- sapply(1:B, function(b) {
# iterate over class 1
wbj <- DRFpredj$weightsb[[b]]
wb <- DRFpred$weightsb[[b]]
sum(diag((wb - wall - (wbj - wj)) %*% K %*% t(wb - wall - (wbj - wj))))
})
nulldist
val
wj
b<-1
wbj <- DRFpredj$weightsb[[b]]
wb <- DRFpred$weightsb[[b]]
wbj
wb
(wb - wall - (wbj - wj))
source("C:/Users/Jeff/OneDrive/Dokumente/Studium/PhD/Projects with Marc/Github/DRFvarimporance/drfnew_v2.R")
library(kernlab)
library(drf)
library(Matrix)
# Load necessary libraries
library(mvtnorm) # for generating multivariate normal random variables
library(ks)
library(dplyr)
library(kableExtra)
library(copula)
source("drfnew_v2.R")
#source("applications")
source("genData.R")
source("evaluation.R")
set.seed(10)
### Continue with more fancy examples!!!
n<-500
ntest<-round(n*0.1)
num.trees<-2000
##### Continue with the collection of the DRF datasets ######
## Discuss with Julie: Could be super interesting to use a medical dataset with
## patients, whereby X is the patients characteristics and Y is a stream of measurements
##(though would probably need Gaussian processes in a first step)
## Step 2: Do Analysis
### 2.a) if the dataset is synthetic, we can check the correct variable ordering
evalsynthetic(dataset="meanshift", L=10, n=n, B=1, p=3, num.trees = num.trees)
library(kernlab)
library(drf)
library(Matrix)
# Load necessary libraries
library(mvtnorm) # for generating multivariate normal random variables
library(ks)
library(dplyr)
library(kableExtra)
library(copula)
source("drfnew_v2.R")
#source("applications")
source("genData.R")
source("evaluation.R")
set.seed(10)
### Continue with more fancy examples!!!
n<-500
ntest<-round(n*0.1)
num.trees<-2000
head(X)
dataset
tmp<-genData(dataset = "meanshift", n = n, p = p)
tmp<-genData(dataset = "meanshift", n = n, p = 3)
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
tmp
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
head(X)
head(Y)
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=100
require(drf)
require(kernlab)
require(Matrix)
# Sample Splitting
Xtest <- X[(round(n - ntest) + 1):n, , drop = F]
Ytest <- Y[(round(n - ntest) + 1):n, , drop = F]
#
X <- X[1:round(n - ntest), , drop = F]
Y <- Y[1:round(n - ntest), , drop = F]
bandwidth_Y <- drf:::medianHeuristic(Ytest)
k_Y <- rbfdot(sigma = bandwidth_Y)
K <- kernelMatrix(k_Y, Y, y = Y)
debug(drfwithVI)
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
nrow(X)
nrow(X)
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
nrow(X)
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=100
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ntest
head(X)
dim(X)
dim(Y)
source("C:/Users/Jeff/OneDrive/Dokumente/Studium/PhD/Projects with Marc/Github/DRFvarimporance/drfnew_v2.R")
debug(drfwithVI)
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=100
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
I0list[[1]]
source("C:/Users/Jeff/OneDrive/Dokumente/Studium/PhD/Projects with Marc/Github/DRFvarimporance/drfnew_v2.R")
debugSource("C:/Users/Jeff/OneDrive/Dokumente/Studium/PhD/Projects with Marc/Github/DRFvarimporance/drfnew_v2.R")
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=100
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=100
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
debugSource("C:/Users/Jeff/OneDrive/Dokumente/Studium/PhD/Projects with Marc/Github/DRFvarimporance/drfnew_v2.R")
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=100
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
I0list[[1]]
I0list[[2]]
n<-1000
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=100
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
debugSource("C:/Users/Jeff/OneDrive/Dokumente/Studium/PhD/Projects with Marc/Github/DRFvarimporance/drfnew_v2.R")
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
I0list[[1]]
debugSource("C:/Users/Jeff/OneDrive/Dokumente/Studium/PhD/Projects with Marc/Github/DRFvarimporance/drfnew_v2.R")
n<-1000
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=100
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth
ressynth$VIcorrected
ressynth$VI
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=10
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VI
ressynth$VIcorrected
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=100
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
500^0.90
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=10
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=1
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=2
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-20
num.trees=500
num.features=10
sample.splitting=T
ntest=10
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-50
num.trees=500
num.features=10
sample.splitting=T
ntest=10
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
n<-500
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-50
num.trees=500
num.features=10
sample.splitting=T
ntest=10
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
n<-1000
tmp<-genData(dataset = "meanshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-50
num.trees=500
num.features=10
sample.splitting=T
ntest=10
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
n<-1000
tmp<-genData(dataset = "distshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-50
num.trees=500
num.features=10
sample.splitting=T
ntest=10
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
n<-1000
tmp<-genData(dataset = "distshift", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-50
num.trees=500
num.features=10
sample.splitting=T
ntest=10
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
n<-1000
tmp<-genData(dataset = "motivatingexample", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-50
num.trees=500
num.features=10
sample.splitting=T
ntest=10
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
debugSource("C:/Users/Jeff/OneDrive/Dokumente/Studium/PhD/Projects with Marc/Github/DRFvarimporance/drfnew_v2.R")
n<-1000
tmp<-genData(dataset = "motivatingexample", n = n, p = 3)
X<-tmp$X
Y<-as.matrix(tmp$y)
colnames(X) <- paste0("X",1:ncol(X))
B<-50
num.trees=500
num.features=10
sample.splitting=T
ntest=10
ressynth<-drfwithVI(X, Y, B=B, num.trees=num.trees, num.features=num.features, sample.splitting=sample.splitting, ntest=ntest)
ressynth$VIcorrected
1000^0.9
